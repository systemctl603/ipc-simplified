{"version":3,"sources":["components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","id","App","theme","createMuiTheme","palette","primary","blue","type","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sVAiCeA,MArBf,WACI,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,QAChD,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,kBACA,kBAACL,EAAA,EAAD,CACIC,KAAK,QACLC,MAAM,UACNC,aAAW,OACXG,GAAG,QAEH,kBAAC,IAAD,U,yDCwBLC,MA3Cf,WACI,IACMC,EAAQC,YAAe,CACzBC,QAAS,CACLC,QAASC,OAUjB,OAPkBH,YAAe,CAC7BC,QAAS,CACLG,KAAM,UAMV,kBAACC,EAAA,EAAD,CAAeN,MAAsBA,GACjC,6BACI,kBAAC,EAAD,MACA,yBAAKF,GAAG,eACJ,kBAAC,IAAD,CAAgBD,QAAQ,MAAxB,kBACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAgBA,QAAQ,aAAxB,mCAIJ,yBAAKC,GAAG,aACJ,kBAAC,IAAD,CAAgBD,QAAQ,SAAxB,sDAGA,6BACA,kBAAC,IAAD,CAAiBH,MAAM,WACnB,kBAAC,IAAD,aACA,kBAAC,IAAD,eACA,kBAAC,IAAD,cACA,kBAAC,IAAD,iBAEJ,yBAAKI,GAAG,gBC/BRS,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6640baff.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n    AppBar,\n    Toolbar,\n    IconButton,\n    Typography,\n    Button,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport InvertColorsIcon from \"@material-ui/icons/InvertColors\";\nimport \"./Navbar.css\";\n\nfunction Navbar() {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\">IPC Simplified</Typography>\n                <IconButton\n                    edge=\"start\"\n                    color=\"inherit\"\n                    aria-label=\"menu\"\n                    id=\"dark\"\n                >\n                    <InvertColorsIcon />\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default Navbar;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar.js\";\nimport * as Mui from \"@material-ui/core\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport blue from \"@material-ui/core/colors/blue\";\n\nfunction App() {\n    const currentTheme = true;\n    const theme = createMuiTheme({\n        palette: {\n            primary: blue,\n        },\n    });\n    const darkTheme = createMuiTheme({\n        palette: {\n            type: \"dark\",\n        },\n    });\n\n    function toggleTheme() {}\n    return (\n        <ThemeProvider theme={currentTheme ? theme : darkTheme}>\n            <div>\n                <Navbar />\n                <div id=\"landingpage\">\n                    <Mui.Typography variant=\"h2\">IPC Simplified</Mui.Typography>\n                    <Mui.Divider />\n                    <Mui.Typography variant=\"subtitle1\">\n                        A website to make laws easier.\n                    </Mui.Typography>\n                </div>\n                <div id=\"centernav\">\n                    <Mui.Typography variant=\"body1\">\n                        Please navigate to one of these links for content.\n                    </Mui.Typography>\n                    <br />\n                    <Mui.ButtonGroup color=\"primary\">\n                        <Mui.Button>Home</Mui.Button>\n                        <Mui.Button>Forums</Mui.Button>\n                        <Mui.Button>About</Mui.Button>\n                        <Mui.Button>Lawyers</Mui.Button>\n                    </Mui.ButtonGroup>\n                    <div id=\"buttons\"></div>\n                </div>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}